//Linked List CPP
#include <iostream>
using namespace std;

class Node
{
public:
 int data;
 Node *next;
};

 
void create(Node* &first,int A[],int n)
{
 Node *last,*t;
 int i=0;

 first=new Node;
 first->data=A[0];
 first->next=NULL;
 last=first;
 
 for(i=1;i<n;i++)
 {
 t=new Node;
 t->data=A[i];
 t->next=NULL;
 last->next=t;
 last=t;
 }
}

Node* reverse(Node* cur){
    Node* prev=NULL;
    Node* next=NULL;
    while(cur!=NULL){
        next=cur->next;
        cur->next=prev;
        prev=cur;
        cur=next;
    }
    return prev;
}
void Display(Node* first)
{
 Node* p=first;

 while(p)
 {
 cout<<p->data<<" ";
 p=p->next;
 }
 cout<<endl;
}
void merge(Node* l1,Node* l2){
    while(l2!=NULL){
        Node* temp=l1->next;
        l1->next=l2;
        l1=l2;
        l2=temp;
        
    }
}
void reorderlist(Node* first){
    if(first==NULL || first->next==NULL) return;
    Node* slow=first;
    Node* fast=first;
    Node* prev=NULL;
    //Node* cur=first;
    while(fast!=NULL && fast->next!=NULL){
        prev=slow;
        slow=slow->next;
        fast=fast->next->next;
    }
    prev->next=NULL;
    Node* l1=first;
    Node* l2=reverse(slow);
    merge(l1,l2);
}


int main()
{ Node* first=NULL;
 int A1[]={1,2,3,4,5};
 create(first,A1,5);
 Display(first);
 reorderlist(first);
 Display(first);
 return 0;
}

