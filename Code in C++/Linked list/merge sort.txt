//Linked List CPP
#include <iostream>
using namespace std;

class Node
{
public:
 int data;
 Node *next;
};

void create(Node* &first,int A[],int n)
{
 Node *last,*t;
 int i=0;

 first=new Node;
 first->data=A[0];
 first->next=NULL;
 last=first;
 
 for(i=1;i<n;i++)
 {
 t=new Node;
 t->data=A[i];
 t->next=NULL;
 last->next=t;
 last=t;
 }
}

void Display(Node* first)
{
 Node* p=first;

 while(p)
 {
 cout<<p->data<<" ";
 p=p->next;
 }
 cout<<endl;
}
Node* merge(Node* &first1,Node* &first2){
     
    Node *p1=first1;
    Node* p2=first2;
    Node* dummyNode=new Node;
    Node* p3=dummyNode;
    while(p1!=NULL && p2!=NULL){
        if(p1->data<p2->data){
            p3->next=p1;
            p1=p1->next;
        }
        else{
            p3->next=p2;
            p2=p2->next;
        }
        p3=p3->next;
    }
    while(p1!=NULL){
        p3->next=p1;
        p1=p1->next;
        p3=p3->next;
    }
    while(p2!=NULL){
        p3->next=p2;
        p2=p2->next;
        p3=p3->next;
    }
    return (dummyNode->next);
} 
void middle(Node *first,Node** first1,Node** first2){
    Node*slow=first;
    Node*fast=first->next;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
     *first1=first;
    *first2=slow->next;
    slow->next=NULL;
    
}
Node* mergesort(Node*first){
    Node*cur=first;
    Node*first1;
    Node* first2;
    if(cur==NULL || cur->next==NULL){
        return first;
    }
    middle(first,&first1,&first2);
    
    first1= mergesort(first1);
    first2=mergesort(first2);
    Node* newhead= merge(first1,first2);
    return newhead;
}


int main()
{ Node* first=NULL;
  Node* first1=NULL;
 int A1[]={10,7,5,1,9,8,6};
 create(first,A1,7);
 Display(first);
 first1=mergesort(first);
 Display(first1);
 return 0;
}

